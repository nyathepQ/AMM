{"ast":null,"code":"export function getFechaHoraActual() {\n  const ahora = new Date();\n  const año = ahora.getFullYear();\n  const mes = String(ahora.getMonth() + 1).padStart(2, '0');\n  const dia = String(ahora.getDate()).padStart(2, '0');\n  const horas = String(ahora.getHours()).padStart(2, '0');\n  const minutos = String(ahora.getMinutes()).padStart(2, '0');\n  const segundos = String(ahora.getSeconds()).padStart(2, '0');\n  return `${año}-${mes}-${dia} ${horas}:${minutos}:${segundos}`;\n}\nexport function getFechaEquipo() {\n  const ahora = new Date();\n\n  //comprobar si la hora es igual o mayor a las 8 pm\n  if (ahora.getHours() > 19) {\n    ahora.setDate(ahora.getDate() + 1); //sumar un día\n    const fecha = ahora.toLocaleDateString('en-CA'); //transformar a Date de mysql\n    return fecha;\n  } else {\n    // si es menos de las 8 pm retornar el mismo día\n    return ahora.toLocaleDateString('en-CA'); //transformar a Date de mysql\n  }\n}\nexport function calcSumaHoras(horaInicial, tiempoEstimado) {\n  const [h1, m1] = horaInicial.split(':').map(Number);\n  const [h2, m2] = tiempoEstimado.split(':').map(Number);\n  let minutosTotales = m1 + m2;\n  let horasTotales = h1 + h2 + Math.floor(minutosTotales / 60);\n  minutosTotales = minutosTotales % 60;\n\n  //formato\n  const hh = String(horasTotales).padStart(2, '0');\n  const mm = String(minutosTotales).padStart(2, '0');\n  return `${hh}:${mm}`;\n}","map":{"version":3,"names":["getFechaHoraActual","ahora","Date","año","getFullYear","mes","String","getMonth","padStart","dia","getDate","horas","getHours","minutos","getMinutes","segundos","getSeconds","getFechaEquipo","setDate","fecha","toLocaleDateString","calcSumaHoras","horaInicial","tiempoEstimado","h1","m1","split","map","Number","h2","m2","minutosTotales","horasTotales","Math","floor","hh","mm"],"sources":["C:/Users/nyath/Documents/Git proyects/CARLOS_QUEVEDO_AA4_EV03/amm/src/utils/time.js"],"sourcesContent":["export function getFechaHoraActual() {\r\n    const ahora = new Date();\r\n\r\n    const año = ahora.getFullYear();\r\n    const mes = String(ahora.getMonth() + 1).padStart(2, '0');\r\n    const dia = String(ahora.getDate()).padStart(2, '0');\r\n\r\n    const horas = String(ahora.getHours()).padStart(2, '0');\r\n    const minutos = String(ahora.getMinutes()).padStart(2, '0');\r\n    const segundos = String(ahora.getSeconds()).padStart(2, '0');\r\n\r\n    return `${año}-${mes}-${dia} ${horas}:${minutos}:${segundos}`;\r\n}\r\n\r\nexport function getFechaEquipo() {\r\n    const ahora = new Date();\r\n\r\n    //comprobar si la hora es igual o mayor a las 8 pm\r\n    if(ahora.getHours() > 19) {\r\n        ahora.setDate(ahora.getDate() + 1); //sumar un día\r\n        const fecha = ahora.toLocaleDateString('en-CA'); //transformar a Date de mysql\r\n        return fecha;\r\n    } else { // si es menos de las 8 pm retornar el mismo día\r\n        return ahora.toLocaleDateString('en-CA'); //transformar a Date de mysql\r\n    }\r\n}\r\n\r\nexport function calcSumaHoras (horaInicial, tiempoEstimado) {\r\n    const [h1, m1] = horaInicial.split(':').map(Number);\r\n    const [h2, m2] = tiempoEstimado.split(':').map(Number);\r\n\r\n    let minutosTotales = m1 + m2;\r\n    let horasTotales = h1 + h2 + Math.floor(minutosTotales / 60);\r\n    minutosTotales = minutosTotales % 60;\r\n\r\n    //formato\r\n    const hh = String(horasTotales).padStart(2, '0');\r\n    const mm = String(minutosTotales).padStart(2, '0');\r\n\r\n    return `${hh}:${mm}`;\r\n}"],"mappings":"AAAA,OAAO,SAASA,kBAAkBA,CAAA,EAAG;EACjC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EAExB,MAAMC,GAAG,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC;EAC/B,MAAMC,GAAG,GAAGC,MAAM,CAACL,KAAK,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACzD,MAAMC,GAAG,GAAGH,MAAM,CAACL,KAAK,CAACS,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEpD,MAAMG,KAAK,GAAGL,MAAM,CAACL,KAAK,CAACW,QAAQ,CAAC,CAAC,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACvD,MAAMK,OAAO,GAAGP,MAAM,CAACL,KAAK,CAACa,UAAU,CAAC,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC3D,MAAMO,QAAQ,GAAGT,MAAM,CAACL,KAAK,CAACe,UAAU,CAAC,CAAC,CAAC,CAACR,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAE5D,OAAO,GAAGL,GAAG,IAAIE,GAAG,IAAII,GAAG,IAAIE,KAAK,IAAIE,OAAO,IAAIE,QAAQ,EAAE;AACjE;AAEA,OAAO,SAASE,cAAcA,CAAA,EAAG;EAC7B,MAAMhB,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;;EAExB;EACA,IAAGD,KAAK,CAACW,QAAQ,CAAC,CAAC,GAAG,EAAE,EAAE;IACtBX,KAAK,CAACiB,OAAO,CAACjB,KAAK,CAACS,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpC,MAAMS,KAAK,GAAGlB,KAAK,CAACmB,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;IACjD,OAAOD,KAAK;EAChB,CAAC,MAAM;IAAE;IACL,OAAOlB,KAAK,CAACmB,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;EAC9C;AACJ;AAEA,OAAO,SAASC,aAAaA,CAAEC,WAAW,EAAEC,cAAc,EAAE;EACxD,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGH,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EACnD,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGP,cAAc,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAEtD,IAAIG,cAAc,GAAGN,EAAE,GAAGK,EAAE;EAC5B,IAAIE,YAAY,GAAGR,EAAE,GAAGK,EAAE,GAAGI,IAAI,CAACC,KAAK,CAACH,cAAc,GAAG,EAAE,CAAC;EAC5DA,cAAc,GAAGA,cAAc,GAAG,EAAE;;EAEpC;EACA,MAAMI,EAAE,GAAG7B,MAAM,CAAC0B,YAAY,CAAC,CAACxB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAChD,MAAM4B,EAAE,GAAG9B,MAAM,CAACyB,cAAc,CAAC,CAACvB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAElD,OAAO,GAAG2B,EAAE,IAAIC,EAAE,EAAE;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}